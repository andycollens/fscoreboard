#!/bin/bash

# =============================================================================
# FSCOREBOARD - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
# =============================================================================
# –ê–≤—Ç–æ—Ä: FSCORE Team
# –í–µ—Ä—Å–∏—è: 1.0.0
# –û–ø–∏—Å–∞–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–∞–±–ª–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
# =============================================================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
INSTALL_DIR="/opt/fscoreboard"
NGINX_SITES_AVAILABLE="/etc/nginx/sites-available"
NGINX_SITES_ENABLED="/etc/nginx/sites-enabled"
REPO_URL="https://github.com/andycollens/fscoreboard.git"
DEFAULT_PORT=3001
DEFAULT_TOKEN="MySecret111"

# –§—É–Ω–∫—Ü–∏–∏
print_header() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                           FSCOREBOARD INSTALLER                              ‚ïë"
    echo "‚ïë                        –°–∏—Å—Ç–µ–º–∞ —Ç–∞–±–ª–æ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_step() {
    echo -e "\n${BLUE}üîß $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root"
        print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo $0"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
check_system() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    if ! command -v apt &> /dev/null; then
        print_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Ubuntu/Debian —Å–∏—Å—Ç–µ–º—ã"
        exit 1
    fi
    
    print_success "–°–∏—Å—Ç–µ–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
check_updates() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã..."
    
    local updates_available=$(apt list --upgradable 2>/dev/null | grep -c "upgradable" 2>/dev/null || echo "0")
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    updates_available=$(echo "$updates_available" | tr -d '\n\r' | grep -o '^[0-9]*$' || echo "0")
    
    if [ "$updates_available" -gt 0 ]; then
        print_warning "–î–æ—Å—Ç—É–ø–Ω–æ $updates_available –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∞–∫–µ—Ç–æ–≤"
        read -p "–û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π? (y/N): " update_system
        
        if [[ "$update_system" =~ ^[Yy]$ ]]; then
            print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
            apt update -y
            apt upgrade -y
            print_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else
            print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ"
        fi
    else
        print_success "–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
install_nodejs() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js..."
    
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
        if [ "$NODE_VERSION" -ge 18 ]; then
            print_success "Node.js $NODE_VERSION —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            return
        else
            print_warning "Node.js –≤–µ—Ä—Å–∏–∏ $NODE_VERSION —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ 18.x"
        fi
    fi
    
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 18.x..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt-get install -y nodejs
    print_success "Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(node --version)"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2
install_pm2() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ PM2..."
    
    if command -v pm2 &> /dev/null; then
        print_success "PM2 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2..."
        npm install -g pm2
        print_success "PM2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx
install_nginx() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx..."
    
    if command -v nginx &> /dev/null; then
        print_success "Nginx —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx..."
        apt install nginx -y
        systemctl enable nginx
        systemctl start nginx
        print_success "Nginx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
find_free_port() {
    local port=$1
    local max_port=65535
    
    while [ $port -le $max_port ]; do
        if ! netstat -tlnp 2>/dev/null | grep -q ":$port "; then
            echo $port
            return
        fi
        port=$((port + 1))
    done
    
    print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç"
    exit 1
}

# –ü–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è PM2 –ø—Ä–æ—Ü–µ—Å—Å–∞
find_unique_pm2_name() {
    local base_name="fscoreboard"
    local name="$base_name"
    local counter=1
    
    while pm2 list --no-color 2>/dev/null | grep -q " $name "; do
        name="${base_name}_${counter}"
        counter=$((counter + 1))
    done
    
    echo "$name"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
ensure_port_free() {
    local port=$1
    local processes=$(netstat -tlnp 2>/dev/null | grep ":$port " | awk '{print $7}' | cut -d'/' -f1 | sort -u)
    
    if [ -n "$processes" ]; then
        print_warning "–ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: $processes"
        
        for pid in $processes; do
            if [ "$pid" != "0" ] && [ "$pid" != "-" ]; then
                print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $pid –Ω–∞ –ø–æ—Ä—Ç—É $port"
                kill -9 "$pid" 2>/dev/null || true
            fi
        done
        
        sleep 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è –ª–∏ –ø–æ—Ä—Ç
        if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
            print_warning "–ü–æ—Ä—Ç $port –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"
            return 1
        else
            print_success "–ü–æ—Ä—Ç $port –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
            return 0
        fi
    fi
    
    return 0
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
generate_token() {
    openssl rand -hex 16
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
interactive_setup() {
    print_step "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞..."
    
    # –ü–æ—Ä—Ç
    if netstat -tlnp 2>/dev/null | grep -q ":$DEFAULT_PORT "; then
        print_warning "–ü–æ—Ä—Ç $DEFAULT_PORT –∑–∞–Ω—è—Ç"
        read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è FSCOREBOARD (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞): " custom_port
        if [ -z "$custom_port" ]; then
            PORT=$(find_free_port $DEFAULT_PORT)
            print_info "–í—ã–±—Ä–∞–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: $PORT"
        else
            PORT=$custom_port
            if netstat -tlnp 2>/dev/null | grep -q ":$PORT "; then
                print_error "–ü–æ—Ä—Ç $PORT –∑–∞–Ω—è—Ç"
                exit 1
            fi
        fi
    else
        PORT=$DEFAULT_PORT
        print_success "–ü–æ—Ä—Ç $PORT —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
    
    # –¢–æ–∫–µ–Ω
    read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): " custom_token
    if [ -z "$custom_token" ]; then
        TOKEN=$(generate_token)
        print_info "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω: $TOKEN"
    else
        TOKEN=$custom_token
    fi
    
    # –î–æ–º–µ–Ω/IP
    read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ IP —Å–µ—Ä–≤–µ—Ä–∞ (–∏–ª–∏ Enter –¥–ª—è –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏–∏): " custom_domain
    if [ -z "$custom_domain" ]; then
        DOMAIN=$(curl -s ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}')
        print_info "–ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏—è –¥–æ–º–µ–Ω–∞/IP: $DOMAIN"
    else
        DOMAIN=$custom_domain
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
check_installation_type() {
    print_step "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    local is_existing_installation=false
    local warnings=()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FSCOREBOARD
    if [ -d "$INSTALL_DIR" ] && [ -f "$INSTALL_DIR/server/app.js" ]; then
        is_existing_installation=true
        print_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ FSCOREBOARD –≤ $INSTALL_DIR"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PM2 –ø—Ä–æ—Ü–µ—Å—Å–∞
        if pm2 list | grep -q "fscoreboard.*online"; then
            print_info "FSCOREBOARD –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –≤ PM2"
        else
            print_warning "FSCOREBOARD –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ PM2"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    if [ -d "$NGINX_SITES_ENABLED" ]; then
        local nginx_configs=$(ls $NGINX_SITES_ENABLED/ 2>/dev/null | wc -l)
        if [ "$nginx_configs" -gt 0 ]; then
            print_warning "–ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx:"
            ls -la $NGINX_SITES_ENABLED/
            warnings+=("nginx")
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if command -v pm2 &> /dev/null; then
        local pm2_processes=$(pm2 list --no-color | grep -c "online" || true)
        if [ "$pm2_processes" -gt 0 ]; then
            print_warning "–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã:"
            pm2 list
            warnings+=("pm2")
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    local occupied_ports=()
    for port in 80 443 3001 3002 3003; do
        if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
            occupied_ports+=("$port")
        fi
    done
    
    if [ ${#occupied_ports[@]} -gt 0 ]; then
        print_warning "–ó–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã: ${occupied_ports[*]}"
        warnings+=("ports")
    fi
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if [ "$is_existing_installation" = true ]; then
        echo -e "\n${PURPLE}üîÑ –†–ï–ñ–ò–ú: –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –£–°–¢–ê–ù–û–í–ö–ò${NC}"
        echo -e "${CYAN}–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ FSCOREBOARD.${NC}"
        echo ""
        echo -e "${GREEN}‚úÖ –ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:${NC}"
        echo -e "  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        echo -e "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
        echo -e "  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö"
        echo -e "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
        echo ""
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if [ -t 0 ] && [ -z "$NONINTERACTIVE" ]; then
            echo -n "–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É FSCOREBOARD? (Y/n): "
            read -t 10 update_existing
            if [ $? -ne 0 ] || [ -z "$update_existing" ]; then
                print_info "–¢–∞–π–º–∞—É—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            elif [[ "$update_existing" =~ ^[Nn]$ ]]; then
                print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
                exit 0
            fi
        else
            print_info "–ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        fi
    elif [ ${#warnings[@]} -gt 0 ]; then
        echo -e "\n${BLUE}üÜï –†–ï–ñ–ò–ú: –£–°–¢–ê–ù–û–í–ö–ê –ù–ê –°–ï–†–í–ï–† –° –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò –ü–†–û–ï–ö–¢–ê–ú–ò${NC}"
        echo -e "${CYAN}FSCOREBOARD –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ë–ï–ó–û–ü–ê–°–ù–û —Ä—è–¥–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.${NC}"
    else
        echo -e "\n${GREEN}üÜï –†–ï–ñ–ò–ú: –ß–ò–°–¢–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê${NC}"
        echo -e "${CYAN}–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —á–∏—Å—Ç—ã–π —Å–µ—Ä–≤–µ—Ä.${NC}"
    fi
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if [ ${#warnings[@]} -gt 0 ]; then
        echo ""
        echo -e "${GREEN}‚úÖ –ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:${NC}"
        if [ "$is_existing_installation" = true ]; then
            echo -e "  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            echo -e "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
            echo -e "  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö"
        else
            echo -e "  ‚Ä¢ Nginx: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)"
            echo -e "  ‚Ä¢ PM2: –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã)"
            echo -e "  ‚Ä¢ –ü–æ—Ä—Ç—ã: –≤—ã–±—Ä–∞–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"
        fi
        echo ""
        echo -e "${BLUE}üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC}"
        echo -e "  ‚Ä¢ FSCOREBOARD: pm2 restart fscoreboard"
        if [ "$is_existing_installation" = false ]; then
            echo -e "  ‚Ä¢ –î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã: —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ"
        fi
        echo ""
        
        echo ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if [ -t 0 ] && [ -z "$NONINTERACTIVE" ]; then
            echo -n "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (Y/n): "
            read -t 10 continue_install
            if [ $? -ne 0 ] || [ -z "$continue_install" ]; then
                print_info "–¢–∞–π–º–∞—É—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            elif [[ "$continue_install" =~ ^[Nn]$ ]]; then
                print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
                exit 0
            fi
        else
            print_info "–ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        fi
        
        print_success "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
    else
        print_success "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
    fi
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
    export INSTALLATION_TYPE=$([ "$is_existing_installation" = true ] && echo "update" || echo "fresh")
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
clone_repository() {
    if [ "$INSTALLATION_TYPE" = "update" ]; then
        print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        cd "$INSTALL_DIR"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if [ -f ".env" ]; then
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
            print_info "–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        fi
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
        git fetch origin
        git reset --hard origin/main
        print_success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    else
        print_step "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        git clone "$REPO_URL" "$INSTALL_DIR"
        chown -R $SUDO_USER:$SUDO_USER "$INSTALL_DIR"
        print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    cd "$INSTALL_DIR"
    npm install
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    mkdir -p "$INSTALL_DIR/logs"
    mkdir -p "$INSTALL_DIR/public/logos"
    chown -R $SUDO_USER:$SUDO_USER "$INSTALL_DIR"
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
create_nginx_config() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..."
    
    local nginx_config="$NGINX_SITES_AVAILABLE/fscoreboard"
    
    cat > "$nginx_config" << EOF
server {
    listen 80;
    server_name _;

    # WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è Socket.IO
    location /socket.io/ {
        proxy_pass http://localhost:$PORT;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–∫—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ Express —Å–µ—Ä–≤–µ—Ä
    location / {
        proxy_pass http://localhost:$PORT;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }

    # –õ–æ–≥–∏
    access_log /var/log/nginx/fscoreboard_access.log;
    error_log /var/log/nginx/fscoreboard_error.log;
}
EOF

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ln -sf "$nginx_config" "$NGINX_SITES_ENABLED/fscoreboard"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–∞–π—Ç–æ–≤
    local other_sites=$(ls $NGINX_SITES_ENABLED/ 2>/dev/null | grep -v fscoreboard | wc -l)
    if [ "$other_sites" -eq 0 ]; then
        rm -f "$NGINX_SITES_ENABLED/default"
    else
        print_warning "–û—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if nginx -t; then
        print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
    else
        print_error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
        exit 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    if [ "$INSTALLATION_TYPE" = "update" ]; then
        print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        local latest_backup=$(ls -t "$INSTALL_DIR"/.env.backup.* 2>/dev/null | head -1)
        if [ -n "$latest_backup" ]; then
            cp "$latest_backup" "$INSTALL_DIR/.env"
            print_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        fi
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if [ ! -f "$INSTALL_DIR/.env" ]; then
            cat > "$INSTALL_DIR/.env" << EOF
PORT=$PORT
TOKEN=$TOKEN
NODE_ENV=production
EOF
            print_info "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª .env"
        else
            print_info "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        fi
    else
        print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        
        cat > "$INSTALL_DIR/.env" << EOF
PORT=$PORT
TOKEN=$TOKEN
NODE_ENV=production
EOF
        print_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
    fi
    
    chown $SUDO_USER:$SUDO_USER "$INSTALL_DIR/.env"
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
start_application() {
    print_step "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    cd "$INSTALL_DIR"
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    PM2_NAME=$(find_unique_pm2_name)
    print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞: $PM2_NAME"
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
    pm2 stop fscoreboard 2>/dev/null || true
    pm2 delete fscoreboard 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
    for i in {1..10}; do
        pm2 stop "fscoreboard_$i" 2>/dev/null || true
        pm2 delete "fscoreboard_$i" 2>/dev/null || true
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç
    if ! ensure_port_free $PORT; then
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç $PORT, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"
        PORT=$(find_free_port $PORT)
        print_info "–í—ã–±—Ä–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç: $PORT"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –ø–æ—Ä—Ç–æ–º
        sed -i "s/PORT=.*/PORT=$PORT/" "$INSTALL_DIR/.env"
    fi
    
    # –°–æ–∑–¥–∞–µ–º ecosystem.config.js –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    cat > "$INSTALL_DIR/ecosystem.config.js" << EOF
module.exports = {
  apps: [{
    name: '$PM2_NAME',
    script: 'server/app.js',
    cwd: '$INSTALL_DIR',
    env: {
      NODE_ENV: 'production',
      PORT: '$PORT',
      TOKEN: '$TOKEN'
    },
    instances: 1,
    exec_mode: 'fork',
    watch: false,
    max_memory_restart: '1G',
    error_file: '/root/.pm2/logs/$PM2_NAME-error.log',
    out_file: '/root/.pm2/logs/$PM2_NAME-out.log',
    log_file: '/root/.pm2/logs/$PM2_NAME-combined.log',
    time: true
  }]
};
EOF

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ecosystem —Ñ–∞–π–ª
    pm2 start ecosystem.config.js
    pm2 save
    
    if [ "$INSTALLATION_TYPE" = "fresh" ]; then
        pm2 startup systemd -u $SUDO_USER --hp /home/$SUDO_USER
    fi
    
    print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ '$PM2_NAME' –Ω–∞ –ø–æ—Ä—Ç—É $PORT"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx
restart_nginx() {
    print_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Nginx..."
    systemctl reload nginx
    print_success "Nginx –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
verify_installation() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2 (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–º—è)
    if pm2 list | grep -q "fscoreboard.*online"; then
        print_success "PM2 –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    else
        print_error "PM2 –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
    if netstat -tlnp 2>/dev/null | grep -q ":$PORT "; then
        print_success "–ü–æ—Ä—Ç $PORT —Å–ª—É—à–∞–µ—Ç—Å—è"
    else
        print_error "–ü–æ—Ä—Ç $PORT –Ω–µ —Å–ª—É—à–∞–µ—Ç—Å—è"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost:$PORT/public/scoreboard_vmix.html" | grep -q "200"; then
        print_success "HTTP —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        print_error "HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
    if systemctl is-active --quiet nginx; then
        print_success "Nginx –∞–∫—Ç–∏–≤–µ–Ω"
    else
        print_error "Nginx –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        return 1
    fi
    
    print_success "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
}

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print_results() {
    print_step "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    local current_domain=$(curl -s ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}')
    local current_port=$(grep -o 'PORT=[0-9]*' "$INSTALL_DIR/.env" 2>/dev/null | cut -d'=' -f2 || echo "$PORT")
    local current_token=$(grep -o 'TOKEN=[^[:space:]]*' "$INSTALL_DIR/.env" 2>/dev/null | cut -d'=' -f2 || echo "$TOKEN")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print_info "–î–æ–º–µ–Ω: $current_domain"
    print_info "–ü–æ—Ä—Ç: $current_port"
    print_info "–¢–æ–∫–µ–Ω: $current_token"
    
    echo -e "\n${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    if [ "$INSTALLATION_TYPE" = "update" ]; then
        echo "‚ïë                         –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!                              ‚ïë"
    else
        echo "‚ïë                           –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!                              ‚ïë"
    fi
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    
    echo -e "\n${CYAN}üåê –ì–û–¢–û–í–´–ï –°–°–´–õ–ö–ò –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:${NC}"
    echo -e "${YELLOW}–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
    echo -e "  ${GREEN}http://$current_domain/private/control.html?token=$current_token${NC}"
    echo ""
    echo -e "${YELLOW}–°—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∞–±–ª–æ:${NC}"
    echo -e "  ${GREEN}http://$current_domain/public/scoreboard_vmix.html${NC}  (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–∞–±–ª–æ)"
    echo -e "  ${GREEN}http://$current_domain/public/stadium.html${NC}  (—Å—Ç–∞–¥–∏–æ–Ω)"
    echo -e "  ${GREEN}http://$current_domain/public/preloader.html${NC}  (–∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω)"
    echo ""
    echo -e "${YELLOW}ISKRA CUP —Å—Ç—Ä–∞–Ω–∏—Ü—ã:${NC}"
    echo -e "  ${GREEN}http://$current_domain/public/iskracup_scoreboard.html${NC}  (—Ç–∞–±–ª–æ)"
    echo -e "  ${GREEN}http://$current_domain/public/iskracup_break.html${NC}  (–ø–µ—Ä–µ—Ä—ã–≤)"
    echo -e "  ${GREEN}http://$current_domain/public/iskracup_prematch.html${NC}  (–ø—Ä–µ–º–∞—Ç—á)"
    
    echo -e "\n${CYAN}‚öôÔ∏è  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:${NC}"
    echo -e "${YELLOW}–ü–æ—Ä—Ç:${NC}               $current_port"
    echo -e "${YELLOW}–¢–æ–∫–µ–Ω:${NC}              $current_token"
    echo -e "${YELLOW}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:${NC}         $INSTALL_DIR"
    
    echo -e "\n${CYAN}üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï:${NC}"
    echo -e "${YELLOW}–°—Ç–∞—Ç—É—Å:${NC}             pm2 status"
    echo -e "${YELLOW}–õ–æ–≥–∏:${NC}               pm2 logs fscoreboard"
    echo -e "${YELLOW}–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:${NC}         pm2 restart fscoreboard"
    echo -e "${YELLOW}–û—Å—Ç–∞–Ω–æ–≤–∫–∞:${NC}          pm2 stop fscoreboard"
    echo -e "${YELLOW}–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞:${NC}     pm2 list | grep fscoreboard"
    
    echo -e "\n${GREEN}üéâ FSCOREBOARD –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}"
    echo -e "${BLUE}–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—à–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if [ "$1" = "--non-interactive" ] || [ "$1" = "-y" ]; then
        export NONINTERACTIVE=1
        print_info "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
    fi
    
    check_root
    check_system
    check_updates
    install_nodejs
    install_pm2
    install_nginx
    check_installation_type
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if [ "$INSTALLATION_TYPE" = "fresh" ] && [ -t 0 ]; then
        interactive_setup
    else
        # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–ª–∏ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if [ "$INSTALLATION_TYPE" = "update" ]; then
            PORT=$(grep -o 'PORT=[0-9]*' "$INSTALL_DIR/.env" 2>/dev/null | cut -d'=' -f2 || echo "3001")
            TOKEN=$(grep -o 'TOKEN=[^[:space:]]*' "$INSTALL_DIR/.env" 2>/dev/null | cut -d'=' -f2 || echo "$DEFAULT_TOKEN")
            print_info "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –ø–æ—Ä—Ç $PORT"
        else
            PORT=$(find_free_port $DEFAULT_PORT)
            TOKEN=$(generate_token)
            print_info "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –ø–æ—Ä—Ç $PORT"
        fi
        DOMAIN=$(curl -s ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}')
        print_info "–î–æ–º–µ–Ω/IP: $DOMAIN"
    fi
    clone_repository
    install_dependencies
    create_directories
    create_nginx_config
    create_env_file
    start_application
    restart_nginx
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
    echo -e "\n${PURPLE}üîç –û–¢–õ–ê–î–ö–ê: –í—ã–∑—ã–≤–∞–µ–º print_results...${NC}"
    print_results
    
    if verify_installation; then
        print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    else
        print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: pm2 logs fscoreboard"
        print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: pm2 restart fscoreboard"
        print_info "–ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å: pm2 list"
    fi
    
    echo -e "\n${PURPLE}üîç –û–¢–õ–ê–î–ö–ê: –§—É–Ω–∫—Ü–∏—è main –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
trap 'echo -e "\n${RED}‚ùå –û–®–ò–ë–ö–ê: –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π${NC}"; print_results; exit 1' ERR

# –ó–∞–ø—É—Å–∫
main "$@"

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
echo -e "\n${PURPLE}üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Ü–µ —Å–∫—Ä–∏–ø—Ç–∞${NC}"
print_results